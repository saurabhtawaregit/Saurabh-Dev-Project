# Unique name for this workflow
name: Validate PR on develop branch

# Definition when the workflow should run
on:
  pull_request:
    types: [opened, synchronize]
    branches: [develop]
    paths:
      - 'force-app/**'

# Jobs to be executed when the above conditions are met
jobs:
  validate-deployment-on-develop-org:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      # Checkout source code
      - name: 'Checkout source code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Set up Node.js
      - name: 'Set up Node.js'
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Read PR Body
      - name: 'Read PR Body'
        env:
          PR_BODY: ${{github.event.pull_request.body}}
        run: |
          echo $PR_BODY > ./pr_body.txt
          node ./parsePR.js
          TESTS=$(cat testsToRun.txt)
          echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

      # Install Salesforce CLI (new version - sf)
      - name: 'Install Salesforce CLI'
        run: |
          curl -sL https://developer.salesforce.com/media/salesforce-cli/sfcli/install | bash
          echo "$HOME/.sf/bin" >> $GITHUB_PATH
          sf --version

      # Install sfdx-git-delta
      - name: 'Install sfdx-git-delta'
        run: |
          echo y | sf plugins install sfdx-git-delta
          sf plugins list

      # Install Java (required for certain Salesforce plugins)
      - name: 'Install Java'
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jdk

      # Authenticate to Salesforce Org using URL
      - name: 'Authenticate to Integration Org'
        shell: bash
        run: |
          echo ${{ secrets.SFDX_INTEGRATION_URL }} > ./SFDX_INTEGRATION_URL.txt
          sf org login sfdx-url -f ./SFDX_INTEGRATION_URL.txt --alias integration

      # Create delta package for changes
      - name: 'Create delta packages for new, modified, or deleted metadata'
        run: |
          mkdir changed-sources
          sf sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

      # Scan code
      - name: 'Scan code'
        run: |
          cd changed-sources
          sf scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'
          cd ..

      # Upload SARIF file
      - name: 'Upload SARIF file'
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: changed-sources/apexScanResults.sarif

      # Check-only deploy delta changes (run specified tests)
      - name: 'Check-only deploy delta changes - run specified tests'
        if: ${{ env.APEX_TESTS != 'all' }}
        run: |
          sf deploy metadata --source-dir "changed-sources/force-app" --check-only --test-level RunSpecifiedTests --runtests ${{ env.APEX_TESTS }} --json

      # Check-only deploy delta changes (run all tests)
      - name: 'Check-only deploy delta changes - run all tests'
        if: ${{ env.APEX_TESTS == 'all' }}
        run: |
          sf deploy metadata --source-dir "changed-sources/force-app" --check-only --test-level RunLocalTests --json

      # Deploy destructive changes (if any)
      - name: 'Deploy destructive changes (if any)'
        run: |
          sf deploy metadata --source-dir "changed-sources/destructiveChanges" --check-only --ignore-warnings
